const express = require("express");
const router = express.Router();
const Client = require("../models/client"); // –ú–æ–¥–µ–ª—å –∫–ª–∏–µ–Ω—Ç–∞
const Photographer = require("../models/Photographer"); // –ú–æ–¥–µ–ª—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞
const axios = require("axios");
const { setUserState } = require("../utils/stateManager");
const multer = require("multer");
const fs = require("fs");
const path = require("path");

const sourceDir = path.resolve(__dirname, "../../.."); // –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–µ—Ä–≤–µ—Ä–∞

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
const storage = multer.diskStorage({
	destination: function (req, file, cb) {
		// –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –≤ `req.body.type` –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
		const uploadPath =
			req.query.type === "profile" // –ï—Å–ª–∏ `type` –ø–µ—Ä–µ–¥–∞–Ω –≤ query-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
				? `${path.resolve(sourceDir, "two2one.uz/images/profile")}`
				: `${path.resolve(sourceDir, "two2one.uz/images/portfolio")}`;
		photoPath = uploadPath;
		console.log("–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É—Ç—å:", uploadPath);
		cb(null, uploadPath);
	},
	filename: function (req, file, cb) {
		cb(null, Date.now() + path.extname(file.originalname)); // –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
	},
});

// –°–æ–∑–¥–∞–µ–º multer instance
const upload = multer({ storage: storage }).fields([
	{ name: "profilePhoto" },
	{ name: "lastName" },
	{ name: "age" },
	{ name: "experience" },
	{ name: "favoriteStyles" },
	{ name: "hourlyRate" },
	{ name: "sessionTypes" },
	{ name: "status" },
	{ name: "type" },
]);

// URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
const botToken = "7647751844:AAGSToi5DCbuRGAA156G52obCl3FLHBn5j4"; // –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
const apiUrl = `https://api.telegram.org/bot${botToken}`;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞
const sendPhotographerInterface = async (chatId) => {
	const url = `${apiUrl}/sendMessage`;

	const photographerKeyboard = {
		keyboard: [
			[{ text: "üì∏ –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ" }],
			[{ text: "üìÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è" }, { text: "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏" }],
			[{ text: "üïí –í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏" }],
			[{ text: "üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã" }, { text: "üéü –°—Å—ã–ª–∫–∞" }],
			[{ text: "üîç –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤" }],
		],
		resize_keyboard: true,
		one_time_keyboard: false,
	};

	try {
		await axios.post(url, {
			chat_id: chatId,
			text: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:",
			reply_markup: {
				keyboard: photographerKeyboard.keyboard,
				resize_keyboard: photographerKeyboard.resize_keyboard,
				one_time_keyboard: photographerKeyboard.one_time_keyboard,
			},
		});

		setUserState(chatId, "photographer");
	} catch (error) {
		console.error(
			"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:",
			error.response ? error.response.data : error.message
		);
	}
};

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
router.get("/", async (req, res) => {
	try {
		const clients = await Client.find();
		res.json(clients);
	} catch (error) {
		res.status(500).json({ message: "Server error", error });
	}
});

//–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ –∞–π–¥–∏ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞
router.get("/telegram/:telegramId", async (req, res) => {
	try {
		const client = await Client.findOne({
			telegramId: req.params.telegramId,
		});
		if (!client) {
			return res.status(404).json({ message: "Client not found" });
		}
		res.json(client);
	} catch (error) {
		res.status(500).json({ message: "Server error", error });
	}
});

// –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID
router.get("/:id", async (req, res) => {
	try {
		const client = await Client.findById(req.params.id);
		if (!client) {
			return res.status(404).json({ message: "Client not found" });
		}
		res.json(client);
	} catch (error) {
		res.status(500).json({ message: "Server error", error });
	}
});

router.post("/vip", async (req, res) => {
	try {
		const { clientId, photographerId } = req.body; // –ü–æ–ª—É—á–∞–µ–º clientId –∏ photographerId –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞

		if (!clientId || !photographerId) {
			return res.status(400).json({
				success: false,
				message: "Client ID and Photographer ID are required.",
			});
		}

		// –ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID
		const client = await Client.findById(clientId);

		if (!client) {
			return res
				.status(404)
				.json({ success: false, message: "Client not found." });
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ –≤ —Å–ø–∏—Å–∫–µ photographers –∫–ª–∏–µ–Ω—Ç–∞
		const photographerIndex = client.photographers.findIndex(
			(p) => p.photographerId.toString() === photographerId
		);

		if (photographerIndex === -1) {
			// –ï—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Å —Å—Ç–∞—Ç—É—Å–æ–º VIP
			client.photographers.push({
				photographerId,
				status: "vip",
			});
		} else {
			// –ï—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ —É–∂–µ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å
			client.photographers[photographerIndex].status = "vip";
		}

		await client.save();

		return res.status(200).json({
			success: true,
			message: "Client status updated to VIP for the photographer.",
			client: {
				name: client.name,
				phone: client.phone,
				photographers: client.photographers, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–≤ —Å –∏—Ö —Å—Ç–∞—Ç—É—Å–∞–º–∏
			},
		});
	} catch (error) {
		console.error(error);
		res.status(500).json({
			success: false,
			message: "Server error",
			error,
		});
	}
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–º–æ—É—à–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ç–æ
// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ POST-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø—Ä–æ–º–æ—É—à–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞
router.post("/:id/promote", upload, async (req, res) => {
	try {
		const clientId = req.params.id;
		const type = req.body.type; // –ò–∑–≤–ª–µ–∫–∞–µ–º `type` –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞

		const { path: tempPath, filename } = req.files.profilePhoto[0];

		// const optimizedPath = path.resolve(
		// 	tempPath,
		// 	"..",
		// 	`optimized-${filename}`
		// );

		// await sharp(tempPath)
		// 	.resize(800, 800, { fit: "inside" }) // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–∞–∫—Å–∏–º—É–º 800x800)
		// 	.toFormat("webp") // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ WebP
		// 	.toFile(optimizedPath);

		// fs.unlinkSync(tempPath);

		if (!type) {
			return res
				.status(400)
				.json({ message: "Type is required in the request body" });
		}
		console.log(req.type);
		if (type === "profile") {
			// **1. –ü—Ä–æ–º–æ—É—à–µ–Ω –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞**
			const client = await Client.findById(clientId);
			if (!client) {
				return res.status(404).json({ message: "Client not found" });
			}
			console.log(client);
			// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞
			const newPhotographerData = {
				firstName: client.name,
				lastName: req.body.lastName,
				telegramId: client.telegramId,
				telegramUsername: client.telegramUsername,
				phoneNumber: client.phone,
				age: req.body.age,
				experience: req.body.experience,
				favoriteStyles: req.body.favoriteStyles,
				hourlyRate: req.body.hourlyRate,
				sessionTypes: req.body.sessionTypes,
				status: req.body.status,
				telegramId: client.telegramId,
				portfolio: [],
			};

			// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω
			if (req.files.profilePhoto && req.files.profilePhoto.length > 0) {
				const profilePhoto = req.files.profilePhoto[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª –∏–∑ –º–∞—Å—Å–∏–≤–∞

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º MIME-—Ç–∏–ø —Ñ–∞–π–ª–∞
				if (profilePhoto.mimetype.startsWith("image/")) {
					newPhotographerData.profilePhoto = tempPath; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
				} else {
					console.error("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º");
				}
			} else {
				console.error("–§–∞–π–ª –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω");
			}

			// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞ –∏ —É–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
			const newPhotographer = new Photographer(newPhotographerData);
			await newPhotographer.save();
			await Client.findByIdAndDelete(clientId);

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞
			sendPhotographerInterface(newPhotographer.telegramId);
			res.json({
				message: "Client promoted to photographer successfully",
				photographer: newPhotographer,
			});
		} else if (type === "portfolio") {
			// **2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞**
			const photographer = await Photographer.findById(clientId); // –ò—â–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞ –ø–æ ID (—Ç—É—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è `clientId` –∫–∞–∫ ID —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞)
			if (!photographer) {
				return res
					.status(404)
					.json({ message: "Photographer not found" });
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª—ã –≤ –∑–∞–ø—Ä–æ—Å–µ
			if (req.files) {
				for (const file of req.files) {
					photographer.portfolio.push(file.path); // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞
				}
				await photographer.save();
				return res.json({
					message: "Photos successfully added to portfolio",
					portfolio: photographer.portfolio,
				});
			} else {
				return res
					.status(400)
					.json({ message: "No files provided for portfolio" });
			}
		} else {
			// –ï—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
			return res.status(400).json({ message: `Unknown type: ${type}` });
		}
	} catch (error) {
		console.error("Error promoting client or adding to portfolio:", error);
		res.status(500).json({ message: "Server error", error });
	}
});

module.exports = router;
